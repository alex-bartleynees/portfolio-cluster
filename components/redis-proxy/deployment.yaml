---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-proxy
  namespace: redis
  labels:
    app: redis-proxy
spec:
  replicas: 2  # For high availability
  selector:
    matchLabels:
      app: redis-proxy
  template:
    metadata:
      labels:
        app: redis-proxy
    spec:
      containers:
        - name: redis-proxy
          image: node:20-alpine
          command:
            - sh
            - -c
            - |
              mkdir -p /app
              cat > /app/server.js << 'EOF'
              const express = require('express');
              const Redis = require('ioredis');
              const app = express();

              app.use(express.json());

              // Persistent Redis connection
              const redis = new Redis({
                host: process.env.REDIS_HOST,
                port: parseInt(process.env.REDIS_PORT || '6379'),
                password: process.env.REDIS_PASSWORD,
                tls: process.env.REDIS_TLS === 'true' ? {
                  rejectUnauthorized: false,
                  servername: process.env.REDIS_HOST
                } : undefined,
                maxRetriesPerRequest: 3,
                enableReadyCheck: true,
                retryStrategy(times) {
                  const delay = Math.min(times * 50, 2000);
                  console.log(`Redis retry attempt ${times}, waiting ${delay}ms`);
                  return delay;
                }
              });

              redis.on('connect', () => console.log('Redis connected'));
              redis.on('ready', () => console.log('Redis ready'));
              redis.on('error', (err) => console.error('Redis error:', err));
              redis.on('close', () => console.log('Redis connection closed'));

              // Health check
              app.get('/health', async (req, res) => {
                try {
                  await redis.ping();
                  res.json({ status: 'healthy', redis: 'connected' });
                } catch (error) {
                  res.status(503).json({ status: 'unhealthy', error: error.message });
                }
              });

              // GET key
              app.get('/get/:key', async (req, res) => {
                try {
                  const value = await redis.get(req.params.key);
                  res.json({ key: req.params.key, value });
                } catch (error) {
                  console.error('GET error:', error);
                  res.status(500).json({ error: error.message });
                }
              });

              // SET key with optional TTL
              app.post('/set/:key', async (req, res) => {
                try {
                  const { value, ttl } = req.body;
                  if (ttl) {
                    await redis.setex(req.params.key, ttl, value);
                  } else {
                    await redis.set(req.params.key, value);
                  }
                  res.json({ success: true, key: req.params.key });
                } catch (error) {
                  console.error('SET error:', error);
                  res.status(500).json({ error: error.message });
                }
              });

              // DELETE key
              app.delete('/del/:key', async (req, res) => {
                try {
                  const result = await redis.del(req.params.key);
                  res.json({ success: true, deleted: result });
                } catch (error) {
                  console.error('DEL error:', error);
                  res.status(500).json({ error: error.message });
                }
              });

              // EXISTS check
              app.get('/exists/:key', async (req, res) => {
                try {
                  const exists = await redis.exists(req.params.key);
                  res.json({ key: req.params.key, exists: exists === 1 });
                } catch (error) {
                  console.error('EXISTS error:', error);
                  res.status(500).json({ error: error.message });
                }
              });

              // KEYS pattern
              app.get('/keys/:pattern', async (req, res) => {
                try {
                  const keys = await redis.keys(req.params.pattern);
                  res.json({ pattern: req.params.pattern, keys });
                } catch (error) {
                  console.error('KEYS error:', error);
                  res.status(500).json({ error: error.message });
                }
              });

              const PORT = process.env.PORT || 3000;
              app.listen(PORT, () => {
                console.log(`Redis HTTP Proxy listening on port ${PORT}`);
              });
              EOF

              cd /app
              npm init -y
              npm install express ioredis
              node server.js
          ports:
            - containerPort: 3000
              name: http
          env:
            - name: REDIS_HOST
              value: redis-master.redis.svc.cluster.local
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_TLS
              value: "true"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-auth
                  key: REDIS_PASSWORD
            - name: PORT
              value: "3000"
          resources:
            requests:
              memory: 128Mi
              cpu: 100m
            limits:
              memory: 256Mi
              cpu: 200m
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: redis-proxy
  namespace: redis
  labels:
    app: redis-proxy
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app: redis-proxy
