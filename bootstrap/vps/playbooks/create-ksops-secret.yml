---
- name: Setup Age Encryption for ArgoCD
  hosts: k8s_master
  become: true
  vars:
    kube_config_dir: "{{ ansible_env.HOME }}/.kube"
    temp_dir: "/tmp/age-setup"

  tasks:
    - name: Install age on Ubuntu/Debian
      apt:
        name: age
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install age on RHEL/CentOS
      block:
        - name: Download age binary
          get_url:
            url: https://github.com/FiloSottile/age/releases/download/v1.1.1/age-v1.1.1-linux-amd64.tar.gz
            dest: /tmp/age.tar.gz
            mode: "0644"

        - name: Extract age binary
          unarchive:
            src: /tmp/age.tar.gz
            dest: /usr/local/bin
            remote_src: yes
            extra_opts:
              - --strip-components=1
              - --wildcards
              - "*/age"
              - "*/age-keygen"
      when: ansible_os_family == "RedHat"

    - name: Create temporary directory
      file:
        path: "{{ temp_dir }}"
        state: directory
        mode: "0700"

    - name: Generate age key
      command: age-keygen -o {{ temp_dir }}/age.agekey
      args:
        creates: "{{ temp_dir }}/age.agekey"
      register: age_key_gen

    - name: Get public key from age key generation output
      set_fact:
        age_public_key: "{{ age_key_gen.stderr_lines | select('match', '^Public key: .*') | first | regex_replace('^Public key: ', '') }}"
      when: age_key_gen.changed

    - name: Create namespace if it doesn't exist
      shell: |
        kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kube_config_dir }}/config"
      become: false

    - name: Create age secret in argocd namespace
      shell: |
        cat {{ temp_dir }}/age.agekey | kubectl create secret generic sops-age \
        --namespace=argocd \
        --from-file=keys.txt=/dev/stdin
      environment:
        KUBECONFIG: "{{ kube_config_dir }}/config"
      become: false

    - name: Create .sops.yaml template
      copy:
        dest: "{{ temp_dir }}/sops.yaml.template"
        content: |
          creation_rules:
            - path_regex: .*\.yaml$
              encrypted_regex: ^(data|stringData)$
              age: "{{ age_public_key }}"

    - name: Display age public key
      debug:
        msg:
          - "Age setup completed successfully!"
          - "Public key: {{ age_public_key }}"
          - "A template .sops.yaml has been created at {{ temp_dir }}/sops.yaml.template"
          - "Copy this file to your Git repository as .sops.yaml"

    - name: Clean up sensitive files
      file:
        path: "{{ temp_dir }}/age.agekey"
        state: absent

  handlers:
    - name: Clean up temp directory
      file:
        path: "{{ temp_dir }}"
        state: absent
