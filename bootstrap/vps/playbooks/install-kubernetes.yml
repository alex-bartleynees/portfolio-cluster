---
- name: Setup Kubernetes Prerequisites
  hosts: k8s_nodes
  become: true
  vars:
    user: "{{ ansible_user }}"

  tasks:
    - name: Add k8s repository
      shell:
        cmd: |
          cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
          [kubernetes]
          name=Kubernetes
          baseurl=https://pkgs.k8s.io/core:/stable:/v1.31/rpm/
          enabled=1
          gpgcheck=1
          repo_gpgcheck=1
          gpgkey=https://pkgs.k8s.io/core:/stable:/v1.31/rpm/repodata/repomd.xml.key
          exclude=kubelet kubeadm kubectl
          EOF

    - name: Install required packages
      dnf:
        name:
          - curl
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
          - iproute-tc
        state: present

    # - name: Add Docker CE repository
    #   get_url:
    #     url: https://download.docker.com/linux/centos/docker-ce.repo
    #     dest: /etc/yum.repos.d/docker-ce.repo
    #     mode: "0644"
    #
    # - name: Install Docker CE
    #   dnf:
    #     name:
    #       - docker-ce
    #       - docker-ce-cli
    #       - containerd.io
    #     state: present

    - name: Create containerd config directory
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: "0755"

    - name: Create containerd config
      ansible.builtin.copy:
        dest: /etc/containerd/config.toml
        content: |
          version = 2
          [plugins]
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
              runtime_type = "io.containerd.runc.v2"
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                SystemdCgroup = true
        mode: "0644"

    - name: Download containerd
      ansible.builtin.get_url:
        url: https://github.com/containerd/containerd/releases/download/v2.0.0/containerd-2.0.0-linux-amd64.tar.gz
        dest: /tmp/containerd.tar.gz
        mode: "0644"

    - name: Extract containerd binaries
      ansible.builtin.unarchive:
        src: /tmp/containerd.tar.gz
        dest: /usr/local
        remote_src: true

    - name: Download containerd service file
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
        dest: /etc/systemd/system/containerd.service
        mode: "0644"

    - name: start containerd
      service:
        name: containerd
        state: started
        enabled: yes

    - name: Download and install runc
      ansible.builtin.get_url:
        url: https://github.com/opencontainers/runc/releases/download/v1.1.3/runc.amd64
        dest: /usr/local/sbin/runc
        mode: "0755"

    - name: Create CNI directory
      ansible.builtin.file:
        path: /opt/cni/bin
        state: directory
        mode: "0755"

    - name: Download CNI plugins
      ansible.builtin.get_url:
        url: https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz
        dest: /tmp/cni-plugins.tgz
        mode: "0644"

    - name: Extract CNI plugins
      ansible.builtin.unarchive:
        src: /tmp/cni-plugins.tgz
        dest: /opt/cni/bin
        remote_src: true

    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/swap/d' /etc/fstab
      when: ansible_swaptotal_mb > 0

    - name: Install Kubernetes packages
      dnf:
        name:
          - kubelet
          - kubeadm
          - kubectl
        disable_excludes: kubernetes
        state: present

    - name: Enable required kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      with_items:
        - br_netfilter
        - overlay

    - name: Configure kernel parameters for Kubernetes
      sysctl:
        name: "{{ item }}"
        value: "1"
        state: present
        reload: yes
      with_items:
        - net.bridge.bridge-nf-call-iptables
        - net.bridge.bridge-nf-call-ip6tables
        - net.ipv4.ip_forward

    - name: Create kubernetes modules load file
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter

    - name: Create kubernetes sysctl file
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1

    - name: Apply sysctl parameters
      command: sysctl --system

    - name: Start and enable kubelet service
      systemd:
        name: kubelet
        state: started
        enabled: yes
        daemon_reload: yes

    # - name: Configure containerd
    #   shell: |
    #     mkdir -p /etc/containerd
    #     containerd config default > /etc/containerd/config.toml
    #     sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
    #   args:
    #     creates: /etc/containerd/config.toml

    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes
