---
- name: Bootstrap Argo CD
  hosts: k8s_master
  become: false
  vars:
    kube_config_dir: "/home/{{ ansible_user }}/.kube"
    argocd_hostname: "argo-cd.alexbartleynees.com"
    cluster_issuer: "letsencrypt-prod"

  tasks:
    - name: Add Argo CD helm repository
      command: helm repo add argo https://argoproj.github.io/argo-helm
      environment:
        KUBECONFIG: "{{ kube_config_dir }}/config"
      register: repo_add
      failed_when:
        - repo_add.rc != 0
        - '"already exists" not in repo_add.stderr'

    - name: Update helm repositories
      command: helm repo update
      environment:
        KUBECONFIG: "{{ kube_config_dir }}/config"
      when: repo_add.changed

    - name: Create argocd namespace
      command: kubectl create namespace argocd
      environment:
        KUBECONFIG: "{{ kube_config_dir }}/config"
      register: namespace_create
      failed_when:
        - namespace_create.rc != 0
        - '"already exists" not in namespace_create.stderr'

    - name: Create network policy
      shell: |
        cat <<'EOF' | kubectl apply -f -
        apiVersion: networking.k8s.io/v1
        kind: NetworkPolicy
        metadata:
          name: argocd-server-network-policy
          namespace: argocd
        spec:
          podSelector:
            matchLabels:
              app.kubernetes.io/name: argocd-server
          policyTypes:
          - Ingress
          ingress:
          - from:
            - namespaceSelector: {}
            ports:
            - port: 80
              protocol: TCP
            - port: 443
              protocol: TCP
        EOF
      environment:
        KUBECONFIG: "{{ kube_config_dir }}/config"

    - name: Install Argo CD
      command: >
        helm upgrade --install argocd argo/argo-cd
        --namespace argocd
        --set server.config.params."server\.insecure"=true
        --set configs.params.enableOCI=true
        --set server.config.url=https://argo-cd.alexbartleynees.com
        --set repoServer.env[0].name=HELM_ENABLE_OIDC
        --set repoServer.env[0].value="true"
        --wait
      environment:
        KUBECONFIG: "{{ kube_config_dir }}/config"
      register: argocd_install
      changed_when: argocd_install.rc == 0

    - name: Create ingress for Argo CD
      shell: |
        cat <<'EOF' | kubectl apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: argocd-server
          namespace: argocd
          annotations:
            cert-manager.io/cluster-issuer: "{{ cluster_issuer }}"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        spec:
          ingressClassName: nginx
          tls:
          - hosts:
            - {{ argocd_hostname }}
            secretName: argocd-server-tls
          rules:
          - host: {{ argocd_hostname }}
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: argocd-server
                    port:
                      number: 443
        EOF
      environment:
        KUBECONFIG: "{{ kube_config_dir }}/config"

    - name: Get initial admin password
      command: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
      environment:
        KUBECONFIG: "{{ kube_config_dir }}/config"
      register: admin_password
      changed_when: false

    - name: Display Argo CD access information
      debug:
        msg:
          - "Argo CD has been installed successfully!"
          - "Access URL: https://{{ argocd_hostname }}"
          - "Initial admin username: admin"
          - "Initial admin password: {{ admin_password.stdout }}"
